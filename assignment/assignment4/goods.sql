/*
 Navicat Premium Data Transfer

 Source Server         : goods
 Source Server Type    : Oracle
 Source Server Version : 120200
 Source Host           : 180.76.158.125:1521
 Source Schema         : GOODS

 Target Server Type    : Oracle
 Target Server Version : 120200
 File Encoding         : 65001

 Date: 17/01/2022 17:35:28
*/


-- ----------------------------
-- Table structure for HTMLDB_PLAN_TABLE
-- ----------------------------
DROP TABLE "GOODS"."HTMLDB_PLAN_TABLE";
CREATE TABLE "GOODS"."HTMLDB_PLAN_TABLE" (
  "STATEMENT_ID" VARCHAR2(30 BYTE) VISIBLE,
  "PLAN_ID" NUMBER VISIBLE,
  "TIMESTAMP" DATE VISIBLE,
  "REMARKS" VARCHAR2(4000 BYTE) VISIBLE,
  "OPERATION" VARCHAR2(30 BYTE) VISIBLE,
  "OPTIONS" VARCHAR2(255 BYTE) VISIBLE,
  "OBJECT_NODE" VARCHAR2(128 BYTE) VISIBLE,
  "OBJECT_OWNER" VARCHAR2(128 BYTE) VISIBLE,
  "OBJECT_NAME" VARCHAR2(128 BYTE) VISIBLE,
  "OBJECT_ALIAS" VARCHAR2(261 BYTE) VISIBLE,
  "OBJECT_INSTANCE" NUMBER VISIBLE,
  "OBJECT_TYPE" VARCHAR2(128 BYTE) VISIBLE,
  "OPTIMIZER" VARCHAR2(255 BYTE) VISIBLE,
  "SEARCH_COLUMNS" NUMBER VISIBLE,
  "ID" NUMBER VISIBLE,
  "PARENT_ID" NUMBER VISIBLE,
  "DEPTH" NUMBER VISIBLE,
  "POSITION" NUMBER VISIBLE,
  "COST" NUMBER VISIBLE,
  "CARDINALITY" NUMBER VISIBLE,
  "BYTES" NUMBER VISIBLE,
  "OTHER_TAG" VARCHAR2(255 BYTE) VISIBLE,
  "PARTITION_START" VARCHAR2(255 BYTE) VISIBLE,
  "PARTITION_STOP" VARCHAR2(255 BYTE) VISIBLE,
  "PARTITION_ID" NUMBER VISIBLE,
  "OTHER" LONG VISIBLE,
  "DISTRIBUTION" VARCHAR2(30 BYTE) VISIBLE,
  "CPU_COST" NUMBER VISIBLE,
  "IO_COST" NUMBER VISIBLE,
  "TEMP_SPACE" NUMBER VISIBLE,
  "ACCESS_PREDICATES" VARCHAR2(4000 BYTE) VISIBLE,
  "FILTER_PREDICATES" VARCHAR2(4000 BYTE) VISIBLE,
  "PROJECTION" VARCHAR2(4000 BYTE) VISIBLE,
  "TIME" NUMBER VISIBLE,
  "QBLOCK_NAME" VARCHAR2(128 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for T_CUSTOMER
-- ----------------------------
DROP TABLE "GOODS"."T_CUSTOMER";
CREATE TABLE "GOODS"."T_CUSTOMER" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "GRADE" NUMBER(10,0) VISIBLE,
  "POINTS" NUMBER(10,0) VISIBLE,
  "SEX" NUMBER(10,0) VISIBLE,
  "MOBILE" VARCHAR2(20 BYTE) VISIBLE,
  "BIRTHDAY" DATE VISIBLE,
  "ADDRESS" VARCHAR2(100 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."GRADE" IS '等级,0：普通客户，1：VIP客户，2：高级VIP客户';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."POINTS" IS '积分';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."SEX" IS '性别，1：男，0：女';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."MOBILE" IS '电话';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."BIRTHDAY" IS '生日';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."ADDRESS" IS '地址';
COMMENT ON COLUMN "GOODS"."T_CUSTOMER"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_CUSTOMER" IS '客户表';

-- ----------------------------
-- Table structure for T_DELIVERY
-- ----------------------------
DROP TABLE "GOODS"."T_DELIVERY";
CREATE TABLE "GOODS"."T_DELIVERY" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "LOGISTICS_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "CUSTOMER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "DELIVERY_STATUS" NUMBER(1,0) VISIBLE NOT NULL,
  "SALES_STATUS" NUMBER(1,0) VISIBLE NOT NULL,
  "SALES_OUT_ID" NUMBER(10,0) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for T_DEPARTMENT
-- ----------------------------
DROP TABLE "GOODS"."T_DEPARTMENT";
CREATE TABLE "GOODS"."T_DEPARTMENT" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "MANAGER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "TELEPHONE" VARCHAR2(20 BYTE) VISIBLE,
  "FAX" VARCHAR2(20 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."MANAGER_ID" IS '部门经理';
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."TELEPHONE" IS '电话';
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."FAX" IS '传真';
COMMENT ON COLUMN "GOODS"."T_DEPARTMENT"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_DEPARTMENT" IS '部门表';

-- ----------------------------
-- Table structure for T_DEPOSIT
-- ----------------------------
DROP TABLE "GOODS"."T_DEPOSIT";
CREATE TABLE "GOODS"."T_DEPOSIT" (
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "WAREHOUSE_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "QUANTITY" NUMBER(10,0) VISIBLE NOT NULL,
  "WARN_QUANTITY" NUMBER(10,0) VISIBLE NOT NULL,
  "PRE_QUANTITY" NUMBER(10,0) VISIBLE NOT NULL,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."WAREHOUSE_ID" IS '仓库编号';
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."QUANTITY" IS '库存量';
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."WARN_QUANTITY" IS '预警库存';
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."PRE_QUANTITY" IS '预占库存';
COMMENT ON COLUMN "GOODS"."T_DEPOSIT"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_DEPOSIT" IS '存放表';

-- ----------------------------
-- Table structure for T_EMPLOYEE
-- ----------------------------
DROP TABLE "GOODS"."T_EMPLOYEE";
CREATE TABLE "GOODS"."T_EMPLOYEE" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "DEPARTMENT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "STATUS" NUMBER(10,0) VISIBLE,
  "SEX" NUMBER(10,0) VISIBLE,
  "EMAIL" VARCHAR2(50 BYTE) VISIBLE,
  "MOBILE" VARCHAR2(20 BYTE) VISIBLE,
  "BIRTHDAY" DATE VISIBLE,
  "EDUCATION" VARCHAR2(20 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."ID" IS '员工编号';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."DEPARTMENT_ID" IS '部门编号';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."STATUS" IS '在职状态,0：离职，1：在职';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."SEX" IS '性别，1：男，0：女';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."EMAIL" IS '邮箱';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."MOBILE" IS '联系电话';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."BIRTHDAY" IS '出生年月';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."EDUCATION" IS '最高学历';
COMMENT ON COLUMN "GOODS"."T_EMPLOYEE"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_EMPLOYEE" IS '员工表';

-- ----------------------------
-- Table structure for T_LOGISTICS
-- ----------------------------
DROP TABLE "GOODS"."T_LOGISTICS";
CREATE TABLE "GOODS"."T_LOGISTICS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "LINKMAN" VARCHAR2(20 BYTE) VISIBLE,
  "MOBILE" VARCHAR2(20 BYTE) VISIBLE,
  "ADDRESS" VARCHAR2(100 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."LINKMAN" IS '联系人';
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."MOBILE" IS '电话';
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."ADDRESS" IS '地址';
COMMENT ON COLUMN "GOODS"."T_LOGISTICS"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_LOGISTICS" IS '仓库表';

-- ----------------------------
-- Table structure for T_PRODUCT
-- ----------------------------
DROP TABLE "GOODS"."T_PRODUCT";
CREATE TABLE "GOODS"."T_PRODUCT" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "CATEGORY" VARCHAR2(20 BYTE) VISIBLE,
  "SPECS" VARCHAR2(20 BYTE) VISIBLE,
  "MODEL" VARCHAR2(20 BYTE) VISIBLE,
  "UNIT" VARCHAR2(10 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE,
  "PRICE" NUMBER(10,0) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."CATEGORY" IS '类别';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."SPECS" IS '规格';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."MODEL" IS '型号';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."UNIT" IS '计量单位';
COMMENT ON COLUMN "GOODS"."T_PRODUCT"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_PRODUCT" IS '商品表';

-- ----------------------------
-- Table structure for T_PURCHASE
-- ----------------------------
DROP TABLE "GOODS"."T_PURCHASE";
CREATE TABLE "GOODS"."T_PURCHASE" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SUPPLIER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "BUYER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PURCHASE_DATE" DATE VISIBLE NOT NULL,
  "APPROVAL_STATUS" NUMBER(10,0) VISIBLE NOT NULL,
  "SUPPLY_STATUS" NUMBER(10,0) VISIBLE NOT NULL,
  "DEAD_LINE" DATE VISIBLE NOT NULL,
  "DELIVERY_ADDRESS" VARCHAR2(100 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."ID" IS '采购单编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."SUPPLIER_ID" IS '供应商编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."BUYER_ID" IS '采购员编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."PURCHASE_DATE" IS '采购日期';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."APPROVAL_STATUS" IS '审批状态，0：新建，1：审批通过，2：审批拒绝';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."SUPPLY_STATUS" IS '供货状态，0：未入库，1：部分入库，2：全部入库';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."DEAD_LINE" IS '要货日期';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."DELIVERY_ADDRESS" IS '供货地址';
COMMENT ON COLUMN "GOODS"."T_PURCHASE"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_PURCHASE" IS '采购单表';

-- ----------------------------
-- Table structure for T_PURCHASE_DETAILS
-- ----------------------------
DROP TABLE "GOODS"."T_PURCHASE_DETAILS";
CREATE TABLE "GOODS"."T_PURCHASE_DETAILS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PURCHASE_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRICE" NUMBER(38,2) VISIBLE NOT NULL,
  "AMOUNT" NUMBER(10,0) VISIBLE NOT NULL,
  "IN_AMOUNT" NUMBER(10,0) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE,
  "OUT_AMOUNT" NUMBER(10,0) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."ID" IS '采购明细单编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."PURCHASE_ID" IS '采购单编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."PRICE" IS '价格';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."AMOUNT" IS '数量';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."IN_AMOUNT" IS '已入库数量';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_DETAILS"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_PURCHASE_DETAILS" IS '采购明细单表';

-- ----------------------------
-- Table structure for T_PURCHASE_IN
-- ----------------------------
DROP TABLE "GOODS"."T_PURCHASE_IN";
CREATE TABLE "GOODS"."T_PURCHASE_IN" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PURCHASE_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "EMPLOYEE_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "IN_DATE" DATE VISIBLE NOT NULL,
  "SUPPLIER" VARCHAR2(20 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."ID" IS '采购入库单编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."PURCHASE_ID" IS '采购单编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."EMPLOYEE_ID" IS '仓管员编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."IN_DATE" IS '入库时间';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."SUPPLIER" IS '供货人';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_PURCHASE_IN" IS '采购入库单表';

-- ----------------------------
-- Table structure for T_PURCHASE_IN_DETAILS
-- ----------------------------
DROP TABLE "GOODS"."T_PURCHASE_IN_DETAILS";
CREATE TABLE "GOODS"."T_PURCHASE_IN_DETAILS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PURCHASE_IN_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRODUCT_ID" NUMBER(10,0) VISIBLE,
  "AMOUNT" NUMBER(10,0) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN_DETAILS"."ID" IS '采购入库明细单号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN_DETAILS"."PURCHASE_IN_ID" IS '采购入库单号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_PURCHASE_IN_DETAILS"."AMOUNT" IS '数量';
COMMENT ON TABLE "GOODS"."T_PURCHASE_IN_DETAILS" IS '采购入库明细单表';

-- ----------------------------
-- Table structure for T_RETURN
-- ----------------------------
DROP TABLE "GOODS"."T_RETURN";
CREATE TABLE "GOODS"."T_RETURN" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SUPPLIER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "BUYER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "RETURN_DATE" DATE VISIBLE NOT NULL,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE NOT NULL,
  "PURCHASE_ID" NUMBER(10,0) VISIBLE,
  "RETURN_STATUS" NUMBER(2,0) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for T_RETURN_DETAILS
-- ----------------------------
DROP TABLE "GOODS"."T_RETURN_DETAILS";
CREATE TABLE "GOODS"."T_RETURN_DETAILS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "RETURN_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRICE" NUMBER(38,2) VISIBLE NOT NULL,
  "AMOUNT" NUMBER(10,0) VISIBLE NOT NULL,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;

-- ----------------------------
-- Table structure for T_SALES
-- ----------------------------
DROP TABLE "GOODS"."T_SALES";
CREATE TABLE "GOODS"."T_SALES" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "CUSTOMER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SELLER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SELL_DATE" DATE VISIBLE,
  "STATUS" NUMBER(10,0) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SALES"."ID" IS '销售单编号';
COMMENT ON COLUMN "GOODS"."T_SALES"."CUSTOMER_ID" IS '客户编号';
COMMENT ON COLUMN "GOODS"."T_SALES"."SELLER_ID" IS '销售员编号';
COMMENT ON COLUMN "GOODS"."T_SALES"."SELL_DATE" IS '销售日期';
COMMENT ON COLUMN "GOODS"."T_SALES"."STATUS" IS '状态，0：未出库，1：部分出库，2：全部出库';
COMMENT ON COLUMN "GOODS"."T_SALES"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_SALES" IS '销售单表';

-- ----------------------------
-- Table structure for T_SALES_DETAILS
-- ----------------------------
DROP TABLE "GOODS"."T_SALES_DETAILS";
CREATE TABLE "GOODS"."T_SALES_DETAILS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SALES_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRICE" NUMBER(38,2) VISIBLE NOT NULL,
  "AMOUNT" NUMBER(10,0) VISIBLE NOT NULL,
  "OUT_AMOUNT" NUMBER(10,0) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."ID" IS '销售明细单号';
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."SALES_ID" IS '销售单编号';
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."PRICE" IS '单价';
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."AMOUNT" IS '数量';
COMMENT ON COLUMN "GOODS"."T_SALES_DETAILS"."OUT_AMOUNT" IS '出库数量';
COMMENT ON TABLE "GOODS"."T_SALES_DETAILS" IS '销售明细单表';

-- ----------------------------
-- Table structure for T_SALES_OUT
-- ----------------------------
DROP TABLE "GOODS"."T_SALES_OUT";
CREATE TABLE "GOODS"."T_SALES_OUT" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SALES_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "EMPLOYEE_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "LOGISTICS_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "OUT_DATE" DATE VISIBLE NOT NULL,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."ID" IS '销售出库单号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."SALES_ID" IS '销售单编号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."EMPLOYEE_ID" IS '仓管员编号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."LOGISTICS_ID" IS '物流公司编号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."OUT_DATE" IS '出库日期';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_SALES_OUT" IS '销售出库单表';

-- ----------------------------
-- Table structure for T_SALES_OUT_DETAILS
-- ----------------------------
DROP TABLE "GOODS"."T_SALES_OUT_DETAILS";
CREATE TABLE "GOODS"."T_SALES_OUT_DETAILS" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SALES_OUT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "AMOUNT" NUMBER(10,0) VISIBLE NOT NULL
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SALES_OUT_DETAILS"."ID" IS '销售出库明细单号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT_DETAILS"."SALES_OUT_ID" IS '销售出库单号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT_DETAILS"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_SALES_OUT_DETAILS"."AMOUNT" IS '数量';
COMMENT ON TABLE "GOODS"."T_SALES_OUT_DETAILS" IS '销售出库明细单表';

-- ----------------------------
-- Table structure for T_SUPPLIER
-- ----------------------------
DROP TABLE "GOODS"."T_SUPPLIER";
CREATE TABLE "GOODS"."T_SUPPLIER" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(50 BYTE) VISIBLE NOT NULL,
  "GRADE" VARCHAR2(20 BYTE) VISIBLE,
  "TELEPHONE" VARCHAR2(20 BYTE) VISIBLE,
  "FAX" VARCHAR2(20 BYTE) VISIBLE,
  "ADDRESS" VARCHAR2(100 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."GRADE" IS '级别';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."TELEPHONE" IS '电话';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."FAX" IS '传真';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."ADDRESS" IS '地址';
COMMENT ON COLUMN "GOODS"."T_SUPPLIER"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_SUPPLIER" IS '供应商表';

-- ----------------------------
-- Table structure for T_SUPPLY
-- ----------------------------
DROP TABLE "GOODS"."T_SUPPLY";
CREATE TABLE "GOODS"."T_SUPPLY" (
  "PRODUCT_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "SUPPLIER_ID" NUMBER(10,0) VISIBLE NOT NULL,
  "PRICE" NUMBER(38,2) VISIBLE NOT NULL,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_SUPPLY"."PRODUCT_ID" IS '商品编号';
COMMENT ON COLUMN "GOODS"."T_SUPPLY"."SUPPLIER_ID" IS '供应商编号';
COMMENT ON COLUMN "GOODS"."T_SUPPLY"."PRICE" IS '价格';
COMMENT ON COLUMN "GOODS"."T_SUPPLY"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_SUPPLY" IS '供应表';

-- ----------------------------
-- Table structure for T_WAREHOUSE
-- ----------------------------
DROP TABLE "GOODS"."T_WAREHOUSE";
CREATE TABLE "GOODS"."T_WAREHOUSE" (
  "ID" NUMBER(10,0) VISIBLE NOT NULL,
  "NAME" VARCHAR2(20 BYTE) VISIBLE NOT NULL,
  "TELEPHONE" VARCHAR2(20 BYTE) VISIBLE,
  "FAX" VARCHAR2(20 BYTE) VISIBLE,
  "ADDRESS" VARCHAR2(100 BYTE) VISIBLE,
  "REMARK" VARCHAR2(200 BYTE) VISIBLE
)
TABLESPACE "USERS"
LOGGING
NOCOMPRESS
PCTFREE 10
INITRANS 1
STORAGE (
  INITIAL 65536 
  NEXT 1048576 
  MINEXTENTS 1
  MAXEXTENTS 2147483645
  BUFFER_POOL DEFAULT
)
PARALLEL 1
NOCACHE
DISABLE ROW MOVEMENT
;
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."ID" IS '编号';
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."NAME" IS '名称';
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."TELEPHONE" IS '电话';
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."FAX" IS '传真';
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."ADDRESS" IS '地址';
COMMENT ON COLUMN "GOODS"."T_WAREHOUSE"."REMARK" IS '备注';
COMMENT ON TABLE "GOODS"."T_WAREHOUSE" IS '仓库表';

-- ----------------------------
-- View structure for V_CUSTOMER
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_CUSTOMER" AS select id,name,(case when grade=2 then '高级VIP客户' when grade=1 then 'VIP客户' else '普通客户' end) as grade, points,(case when sex = 0 then '女' else '男' end) as sex,mobile,birthday,address,remark from t_customer;

-- ----------------------------
-- View structure for V_DELIVERY
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_DELIVERY" AS select a.ID,b.name as LOGISTICS_NAME,c.name as CUSTOMER_NAME,
    (case when a.delivery_status = 0 then '运送中' when a.delivery_status = 1 then '运送完成' END) as D_STATUS,
    (case when a.sales_status = 0 then '正常发货' when a.sales_status = 1 then '顾客退货' END) as S_STATUS, a.SALES_OUT_ID
  from T_DELIVERY a left join T_LOGISTICS b on a.logistics_id = b.id left join T_CUSTOMER c on a.customer_id = c.id;

-- ----------------------------
-- View structure for V_DEPARTMENT
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_DEPARTMENT" AS select a.id as id,a.name as name,a.manager_id as manager_id,b.name as manager,a.telephone as telephone,a.fax as fax,a.remark as remark
from t_department a left join t_employee b on a.manager_id=b.id;

-- ----------------------------
-- View structure for V_DEPOSIT
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_DEPOSIT" AS select a.warehouse_id,c.name as warehouse_name,a.product_id,b.name as product_name,a.quantity,a.warn_quantity,a.pre_quantity,a.remark from t_deposit a left join t_product b on a.product_id = b.id left join t_warehouse c on a.warehouse_id=c.id;

-- ----------------------------
-- View structure for V_EMPLOYEE
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_EMPLOYEE" AS select a.id,a.department_id,b.name as department,a.name,(case when a.status=1 then '在职' else '离职' end) as status, (case when a.sex = 0 then '女' else '男' end) as sex,a.email,a.mobile,a.birthday,a.education,a.remark
from t_employee a left join t_department b on a.department_id=b.id;

-- ----------------------------
-- View structure for V_PURCHASE
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_PURCHASE" AS select a.id,a.supplier_id,b.name as supplier_name,a.buyer_id,c.name as buyer_name,a.purchase_date,
a.approval_status,(case when a.approval_status = 2 then '审批拒绝' when a.approval_status = 1 then '审批通过' else '新建' end) as approval,
a.supply_status,(case when a.supply_status = 2 then '部分入库' when a.supply_status = 1 then '质量检测后未入库' when a.supply_status = 0 then '未进行质量检测' else '全部入库' end) as supply,a.dead_line,a.delivery_address,a.remark
from t_purchase a
left join t_supplier b on a.supplier_id=b.id
left join t_employee c on a.buyer_id=c.id;

-- ----------------------------
-- View structure for V_PURCHASE_DETAILS
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_PURCHASE_DETAILS" AS select a.id,a.purchase_id,a.product_id,b.name as product_name,a.price,a.amount,a.out_amount,a.in_amount,a.remark,0 as process_amt
from t_purchase_details a left join t_product b on a.product_id=b.id;

-- ----------------------------
-- View structure for V_PURCHASE_IN
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_PURCHASE_IN" AS select a.ID,a.PURCHASE_ID,b.name as EMPLOYEE_name,a.IN_DATE,a.SUPPLIER,a.REMARK
from T_PURCHASE_IN a left join t_employee b on a.employee_id=b.id;

-- ----------------------------
-- View structure for V_PURCHASE_IN_DETAILS
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_PURCHASE_IN_DETAILS" AS select a.id,a.purchase_in_id,a.product_id,b.name as product_name,a.amount from t_purchase_in_details a left join t_product b on a.product_id = b.id;

-- ----------------------------
-- View structure for V_RETURN
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_RETURN" AS select a.id,a.supplier_id,b.name as supplier_name,a.buyer_id,c.name as buyer_name,a.RETURN_date,a.remark,a.purchase_id,a.return_status，
  (case when a.return_status = 0 then '退采未到货' when a.return_status = 1 then '退采已到货'end)
from t_return a
left join t_supplier b on a.supplier_id=b.id
left join t_employee c on a.buyer_id=c.id;

-- ----------------------------
-- View structure for V_RETURN_DETAILS
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_RETURN_DETAILS" AS select a.id,a.return_id,a.product_id,b.name as product_name,a.price,a.amount,a.remark
from t_return_details a left join t_product b on a.product_id=b.id;

-- ----------------------------
-- View structure for V_SALES
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_SALES" AS select a.id,a.customer_id,b.name as customer_name,a.seller_id,c.name as seller_name,a.sell_date,a.status as sell_status,
  (case when a.status = 2 then '全部出库' when a.status = 1 then '部分出库' else '未出库' end) as status,b.address,a.remark
from t_sales a,t_customer b, t_employee c 
where a.customer_id = b.id and a.seller_id = c.id;

-- ----------------------------
-- View structure for V_SALES_DETAILS
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_SALES_DETAILS" AS select a.id,a.sales_id,a.product_id,b.name as product_name,a.price,a.amount,a.out_amount,a.remark,0 as process_amt
from t_sales_details a left join t_product b on a.product_id=b.id;

-- ----------------------------
-- View structure for V_SALES_OUT
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_SALES_OUT" AS select a.ID,a.SALES_ID,b.name as EMPLOYEE_name,a.OUT_DATE,c.name as LOGISTICS_NAME,a.REMARK
from T_SALES_OUT a left join t_employee b on a.employee_id=b.id left join T_LOGISTICS c on a.logistics_id = c.id;

-- ----------------------------
-- View structure for V_SALES_OUT_DETAILS
-- ----------------------------
CREATE OR REPLACE VIEW "GOODS"."V_SALES_OUT_DETAILS" AS select a.id,a.sales_out_id,a.product_id,b.name as product_name,a.amount from t_SALES_OUT_details a left join t_product b on a.product_id = b.id;

-- ----------------------------
-- Sequence structure for SEQUNCE_RETURN_DTL
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQUNCE_RETURN_DTL";
CREATE SEQUENCE "GOODS"."SEQUNCE_RETURN_DTL" MINVALUE 1 MAXVALUE 999999999999 INCREMENT BY 1 NOCACHE;

-- ----------------------------
-- Sequence structure for SEQ_CUSTOMER_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_CUSTOMER_ID";
CREATE SEQUENCE "GOODS"."SEQ_CUSTOMER_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_DEPARTMENT_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_DEPARTMENT_ID";
CREATE SEQUENCE "GOODS"."SEQ_DEPARTMENT_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_EMPLOYEE_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_EMPLOYEE_ID";
CREATE SEQUENCE "GOODS"."SEQ_EMPLOYEE_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_LOGISTICS_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_LOGISTICS_ID";
CREATE SEQUENCE "GOODS"."SEQ_LOGISTICS_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PRODUCT_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_PRODUCT_ID";
CREATE SEQUENCE "GOODS"."SEQ_PRODUCT_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PURCHASE_DTL_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_PURCHASE_DTL_ID";
CREATE SEQUENCE "GOODS"."SEQ_PURCHASE_DTL_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PURCHASE_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_PURCHASE_ID";
CREATE SEQUENCE "GOODS"."SEQ_PURCHASE_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PURCHASE_IN_DTL_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_PURCHASE_IN_DTL_ID";
CREATE SEQUENCE "GOODS"."SEQ_PURCHASE_IN_DTL_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_PURCHASE_IN_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_PURCHASE_IN_ID";
CREATE SEQUENCE "GOODS"."SEQ_PURCHASE_IN_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SALES_DTL_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_SALES_DTL_ID";
CREATE SEQUENCE "GOODS"."SEQ_SALES_DTL_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SALES_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_SALES_ID";
CREATE SEQUENCE "GOODS"."SEQ_SALES_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SALES_OUT_DTL_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_SALES_OUT_DTL_ID";
CREATE SEQUENCE "GOODS"."SEQ_SALES_OUT_DTL_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SALES_OUT_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_SALES_OUT_ID";
CREATE SEQUENCE "GOODS"."SEQ_SALES_OUT_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_SUPPLIER_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_SUPPLIER_ID";
CREATE SEQUENCE "GOODS"."SEQ_SUPPLIER_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for SEQ_WAREHOUSE_ID
-- ----------------------------
DROP SEQUENCE "GOODS"."SEQ_WAREHOUSE_ID";
CREATE SEQUENCE "GOODS"."SEQ_WAREHOUSE_ID" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for T_DELIVERY_SEQ
-- ----------------------------
DROP SEQUENCE "GOODS"."T_DELIVERY_SEQ";
CREATE SEQUENCE "GOODS"."T_DELIVERY_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Sequence structure for T_RETURN_SEQ
-- ----------------------------
DROP SEQUENCE "GOODS"."T_RETURN_SEQ";
CREATE SEQUENCE "GOODS"."T_RETURN_SEQ" MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 CACHE 20;

-- ----------------------------
-- Primary Key structure for table T_CUSTOMER
-- ----------------------------
ALTER TABLE "GOODS"."T_CUSTOMER" ADD CONSTRAINT "SYS_C0024300" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_CUSTOMER
-- ----------------------------
ALTER TABLE "GOODS"."T_CUSTOMER" ADD CONSTRAINT "SYS_C0024298" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_CUSTOMER" ADD CONSTRAINT "SYS_C0024299" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_CUSTOMER
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_CUSTOMER_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_CUSTOMER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_customer_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_customer;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_customer_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_DELIVERY
-- ----------------------------
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "T_DELIVERY_PK" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_DELIVERY
-- ----------------------------
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "SYS_C0024428" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "SYS_C0024429" CHECK ("LOGISTICS_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "SYS_C0024430" CHECK ("CUSTOMER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "SYS_C0024431" CHECK ("DELIVERY_STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "SYS_C0024432" CHECK ("SALES_STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_DELIVERY
-- ----------------------------
CREATE TRIGGER "GOODS"."BI_T_DELIVERY" BEFORE INSERT ON "GOODS"."T_DELIVERY" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
begin   
  if :NEW."ID" is null then 
    select "T_DELIVERY_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end;
/

-- ----------------------------
-- Primary Key structure for table T_DEPARTMENT
-- ----------------------------
ALTER TABLE "GOODS"."T_DEPARTMENT" ADD CONSTRAINT "SYS_C0024304" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_DEPARTMENT
-- ----------------------------
ALTER TABLE "GOODS"."T_DEPARTMENT" ADD CONSTRAINT "SYS_C0024301" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPARTMENT" ADD CONSTRAINT "SYS_C0024302" CHECK ("MANAGER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPARTMENT" ADD CONSTRAINT "SYS_C0024303" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_DEPARTMENT
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_DEPARTMENT_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_DEPARTMENT" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_department_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_department;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_department_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_DEPOSIT
-- ----------------------------
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024310" PRIMARY KEY ("PRODUCT_ID", "WAREHOUSE_ID");

-- ----------------------------
-- Checks structure for table T_DEPOSIT
-- ----------------------------
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024305" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024306" CHECK ("WAREHOUSE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024307" CHECK ("QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024308" CHECK ("WARN_QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DEPOSIT" ADD CONSTRAINT "SYS_C0024309" CHECK ("PRE_QUANTITY" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table T_EMPLOYEE
-- ----------------------------
ALTER TABLE "GOODS"."T_EMPLOYEE" ADD CONSTRAINT "SYS_C0024314" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_EMPLOYEE
-- ----------------------------
ALTER TABLE "GOODS"."T_EMPLOYEE" ADD CONSTRAINT "SYS_C0024311" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_EMPLOYEE" ADD CONSTRAINT "SYS_C0024312" CHECK ("DEPARTMENT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_EMPLOYEE" ADD CONSTRAINT "SYS_C0024313" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_EMPLOYEE
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_EMPLOYEE_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_EMPLOYEE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_employee_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_employee;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_employee_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_LOGISTICS
-- ----------------------------
ALTER TABLE "GOODS"."T_LOGISTICS" ADD CONSTRAINT "SYS_C0024317" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_LOGISTICS
-- ----------------------------
ALTER TABLE "GOODS"."T_LOGISTICS" ADD CONSTRAINT "SYS_C0024315" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_LOGISTICS" ADD CONSTRAINT "SYS_C0024316" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_LOGISTICS
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_LOGISTICS_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_LOGISTICS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_logistics_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_logistics;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_logistics_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_PRODUCT
-- ----------------------------
ALTER TABLE "GOODS"."T_PRODUCT" ADD CONSTRAINT "SYS_C0024320" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_PRODUCT
-- ----------------------------
ALTER TABLE "GOODS"."T_PRODUCT" ADD CONSTRAINT "SYS_C0024318" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PRODUCT" ADD CONSTRAINT "SYS_C0024319" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_PRODUCT
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_PRODUCT_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_PRODUCT" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_product_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_product;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_product_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   -- assign the value from the sequence to emulate the identity column
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_PURCHASE
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024328" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_PURCHASE
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024321" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024322" CHECK ("SUPPLIER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024323" CHECK ("BUYER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024324" CHECK ("PURCHASE_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024325" CHECK ("APPROVAL_STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024326" CHECK ("SUPPLY_STATUS" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE" ADD CONSTRAINT "SYS_C0024327" CHECK ("DEAD_LINE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_PURCHASE
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_PURCHASE_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_PURCHASE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_purchase_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_purchase;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_purchase_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_PURCHASE_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024334" PRIMARY KEY ("ID", "PURCHASE_ID");

-- ----------------------------
-- Checks structure for table T_PURCHASE_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024329" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024330" CHECK ("PURCHASE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024331" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024332" CHECK ("PRICE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_DETAILS" ADD CONSTRAINT "SYS_C0024333" CHECK ("AMOUNT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_PURCHASE_DETAILS
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_PURCHASE_DTL_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_PURCHASE_DETAILS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_purchase_dtl_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_purchase_details;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_purchase_dtl_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_PURCHASE_IN
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_IN" ADD CONSTRAINT "SYS_C0024339" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_PURCHASE_IN
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_IN" ADD CONSTRAINT "SYS_C0024335" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_IN" ADD CONSTRAINT "SYS_C0024336" CHECK ("PURCHASE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_IN" ADD CONSTRAINT "SYS_C0024337" CHECK ("EMPLOYEE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_IN" ADD CONSTRAINT "SYS_C0024338" CHECK ("IN_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_PURCHASE_IN
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_PURCHASE_IN_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_PURCHASE_IN" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_purchase_in_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_purchase_in;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_purchase_in_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_PURCHASE_IN_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_IN_DETAILS" ADD CONSTRAINT "SYS_C0024342" PRIMARY KEY ("ID", "PURCHASE_IN_ID");

-- ----------------------------
-- Checks structure for table T_PURCHASE_IN_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_PURCHASE_IN_DETAILS" ADD CONSTRAINT "SYS_C0024340" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_PURCHASE_IN_DETAILS" ADD CONSTRAINT "SYS_C0024341" CHECK ("PURCHASE_IN_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_PURCHASE_IN_DETAILS
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_PURCHASE_IN_DTL_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_PURCHASE_IN_DETAILS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_purchase_in_dtl_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_purchase_in_details;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_purchase_in_dtl_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_RETURN
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "T_RETURN_PK" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_RETURN
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "SYS_C0024375" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "SYS_C0024376" CHECK ("SUPPLIER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "SYS_C0024377" CHECK ("BUYER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "SYS_C0024378" CHECK ("RETURN_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "SYS_C0024383" CHECK ("REMARK" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_RETURN
-- ----------------------------
CREATE TRIGGER "GOODS"."BI_T_RETURN" BEFORE INSERT ON "GOODS"."T_RETURN" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
begin   
  if :NEW."ID" is null then 
    select "T_RETURN_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end;
/

-- ----------------------------
-- Primary Key structure for table T_RETURN_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "T_RETURN_DETAILS_PK" PRIMARY KEY ("ID", "RETURN_ID");

-- ----------------------------
-- Checks structure for table T_RETURN_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "SYS_C0024387" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "SYS_C0024388" CHECK ("RETURN_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "SYS_C0024389" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "SYS_C0024390" CHECK ("PRICE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "SYS_C0024391" CHECK ("AMOUNT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_RETURN_DETAILS
-- ----------------------------
CREATE TRIGGER "GOODS"."BI_T_RETURN_DETAILS" BEFORE INSERT ON "GOODS"."T_RETURN_DETAILS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
begin   
  if :NEW."ID" is null then 
    select "SEQUNCE_RETURN_DTL".nextval into :NEW."ID" from sys.dual; 
  end if; 
end;
/

-- ----------------------------
-- Primary Key structure for table T_SALES
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES" ADD CONSTRAINT "SYS_C0024346" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_SALES
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES" ADD CONSTRAINT "SYS_C0024343" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES" ADD CONSTRAINT "SYS_C0024344" CHECK ("CUSTOMER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES" ADD CONSTRAINT "SYS_C0024345" CHECK ("SELLER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_SALES
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_SALES_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_SALES" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_sales_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_sales;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_sales_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_SALES_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024352" PRIMARY KEY ("ID", "SALES_ID");

-- ----------------------------
-- Checks structure for table T_SALES_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024347" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024348" CHECK ("SALES_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024349" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024350" CHECK ("PRICE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_DETAILS" ADD CONSTRAINT "SYS_C0024351" CHECK ("AMOUNT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_SALES_DETAILS
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_SALES_DETAILS_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_SALES_DETAILS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_sales_dtl_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_sales_details;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_sales_dtl_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_SALES_OUT
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024359" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_SALES_OUT
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024353" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024354" CHECK ("SALES_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024355" CHECK ("EMPLOYEE_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024356" CHECK ("LOGISTICS_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT" ADD CONSTRAINT "SYS_C0024358" CHECK ("OUT_DATE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_SALES_OUT
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_SALES_OUT_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_SALES_OUT" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_sales_out_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_sales_out;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_sales_out_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_SALES_OUT_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_OUT_DETAILS" ADD CONSTRAINT "SYS_C0024364" PRIMARY KEY ("ID", "SALES_OUT_ID");

-- ----------------------------
-- Checks structure for table T_SALES_OUT_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_SALES_OUT_DETAILS" ADD CONSTRAINT "SYS_C0024360" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT_DETAILS" ADD CONSTRAINT "SYS_C0024361" CHECK ("SALES_OUT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT_DETAILS" ADD CONSTRAINT "SYS_C0024362" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SALES_OUT_DETAILS" ADD CONSTRAINT "SYS_C0024363" CHECK ("AMOUNT" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_SALES_OUT_DETAILS
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_SALES_OUT_DTL_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_SALES_OUT_DETAILS" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_sales_out_dtl_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_sales_out_details;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_sales_out_dtl_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_SUPPLIER
-- ----------------------------
ALTER TABLE "GOODS"."T_SUPPLIER" ADD CONSTRAINT "SYS_C0024367" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_SUPPLIER
-- ----------------------------
ALTER TABLE "GOODS"."T_SUPPLIER" ADD CONSTRAINT "SYS_C0024365" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SUPPLIER" ADD CONSTRAINT "SYS_C0024366" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_SUPPLIER
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_SUPPLIER_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_SUPPLIER" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_supplier_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_supplier;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_supplier_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Primary Key structure for table T_SUPPLY
-- ----------------------------
ALTER TABLE "GOODS"."T_SUPPLY" ADD CONSTRAINT "SYS_C0024371" PRIMARY KEY ("PRODUCT_ID", "SUPPLIER_ID");

-- ----------------------------
-- Checks structure for table T_SUPPLY
-- ----------------------------
ALTER TABLE "GOODS"."T_SUPPLY" ADD CONSTRAINT "SYS_C0024368" CHECK ("PRODUCT_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SUPPLY" ADD CONSTRAINT "SYS_C0024369" CHECK ("SUPPLIER_ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_SUPPLY" ADD CONSTRAINT "SYS_C0024370" CHECK ("PRICE" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Primary Key structure for table T_WAREHOUSE
-- ----------------------------
ALTER TABLE "GOODS"."T_WAREHOUSE" ADD CONSTRAINT "SYS_C0024374" PRIMARY KEY ("ID");

-- ----------------------------
-- Checks structure for table T_WAREHOUSE
-- ----------------------------
ALTER TABLE "GOODS"."T_WAREHOUSE" ADD CONSTRAINT "SYS_C0024372" CHECK ("ID" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_WAREHOUSE" ADD CONSTRAINT "SYS_C0024373" CHECK ("NAME" IS NOT NULL) NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Triggers structure for table T_WAREHOUSE
-- ----------------------------
CREATE TRIGGER "GOODS"."TRIG_WAREHOUSE_ID" BEFORE INSERT OR UPDATE ON "GOODS"."T_WAREHOUSE" REFERENCING OLD AS "OLD" NEW AS "NEW" FOR EACH ROW 
DECLARE
v_newval NUMBER(12) := 0;
v_incval NUMBER(12) := 0;
BEGIN
  IF INSERTING AND :new.id IS NULL THEN
    SELECT  seq_warehouse_id.NEXTVAL INTO v_newval FROM DUAL;
    IF v_newval = 1 THEN
      SELECT NVL(max(id),0) INTO v_newval FROM t_warehouse;
      v_newval := v_newval + 1;
      LOOP
           EXIT WHEN v_incval>=v_newval;
           SELECT seq_warehouse_id.nextval INTO v_incval FROM dual;
      END LOOP;
    END IF;
   :new.id := v_newval;
  END IF;
END;
/

-- ----------------------------
-- Foreign Keys structure for table T_DELIVERY
-- ----------------------------
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "T_DELIVERY_CUSTOMER_FK" FOREIGN KEY ("CUSTOMER_ID") REFERENCES "GOODS"."T_CUSTOMER" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_DELIVERY" ADD CONSTRAINT "T_DELIVERY_FK" FOREIGN KEY ("LOGISTICS_ID") REFERENCES "GOODS"."T_LOGISTICS" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table T_RETURN
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "T_RETURN_BUYER_ID_FK" FOREIGN KEY ("BUYER_ID") REFERENCES "GOODS"."T_EMPLOYEE" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN" ADD CONSTRAINT "T_RETURN_FK" FOREIGN KEY ("SUPPLIER_ID") REFERENCES "GOODS"."T_SUPPLIER" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;

-- ----------------------------
-- Foreign Keys structure for table T_RETURN_DETAILS
-- ----------------------------
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "T_RETURN_DETAILS_ID_FK" FOREIGN KEY ("RETURN_ID") REFERENCES "GOODS"."T_RETURN" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
ALTER TABLE "GOODS"."T_RETURN_DETAILS" ADD CONSTRAINT "T_RETURN_DETAILS_PRODUCT_FK" FOREIGN KEY ("PRODUCT_ID") REFERENCES "GOODS"."T_PRODUCT" ("ID") NOT DEFERRABLE INITIALLY IMMEDIATE NORELY VALIDATE;
